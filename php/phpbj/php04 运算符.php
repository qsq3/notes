<?php

/**运算符号:
    1. 基本概念: 运算元 运算符;
    一元运算符: +1 -1 ++ -- ! 
    二元运算符:  + - * / % > < = == ===
    三云运算符: 1?2:3 
    
    算术运算符: + - * / % ++ -- 
        //其他语言中+号可连接字符串 , 
        // % 的用途, 让一个数不超过一个另一个数; 求什么被整除;

    字符串运算符: 
    赋值运算符: = += -= *= /= %= .= =&;
    比较运算符: > < == >+ <=  <> !=  !==
    逻辑运算符: and &&  or || not ! xor
    位运算符:   & | ^ ~ >> <<
    其它运算符: ?: @ => -> ::(访问类的静态方法)
    
*/
/*自增减运算符  数字类型有效, 布尔无效, 字符串ascii码升序
    echo 1/0 ;
    echo 1+1+"4+5+6"+1+1,"<br/>"; //8
    echo 1+1+"4e+5+6"+1+1,"<br/>"; //40004
    echo 13%-2 ,"<br/>"; //1;
    echo -13%-2 ,"<br/>"; //-1; 求模运算中,符号由第一个数决定;
    echo 13.45%2.23456,"<br/>";  //1, JS中会求出一串浮点数;

    $a = 1;
    $b = $a++;
    echo $b,"<br/>",$a,"<br/>"; //1,2
    echo ++$a,"<br/>"; //3
    
    //++和 +=的区别
    $a = true; 
    echo $a++;// true;
    $a = $a + 1;
    echo $a++;// 2;

    $a = 'z';
    $a++;
    echo $a; //aa 字符串++为ascii吗递增,到z后增位;
*/
/* 赋值运算符 
    $str1 = "mm";
    $str2 = '123';
    布尔型不参加++运算;
    $str1.= $str2; //连接字符串
    echo $str1.$str2.'<br/>'; //连接字符串 echo的几种输出方式
    echo "这个变量的值是:$str1<br/>"; //连接
    echo '这个变量的值是:'.$str1.'<br/>'; //连接
    echo '这个变量的值是:',$str1,'<br/>'; //并不是连接,而是echo的三个参数

比较运算符
    1. 比较运算符的返回值是一个布尔值,所以经常用在if(){}, while(){}, for(){};
    2. == 自动转换同类型, 全等还比较类型, 
    3. 注意浮点型是近似数,不要用== ===判断


逻辑运算符: 特性 短路
    and &&  
    or || 
    not ! 
    xor
*/  
<?php
    $year = 4000;
    if( ($year%4 === 0 && $year % 100 !== 0) or $year%400 === 0){
        echo "$year 是闰年!<br/>";
    } else {
        echo "$year 是平年!<br/>";
    }

    var_dump ( 2 < 3).'<br/>' ; //false,与JS中不同,php比较运算符只返回布尔值;
    echo( 2 < 3).'<br/>' ; //1,echo会转换为数字;
    echo ( 2 || 3).'<br/>' ; //1,

   // $link = mysqli_connect('localhost','root','root') or die('数据库连接失败');
    echo('失败后, die下面的程序不会被输出!<br/>');

    $a = 0 ; 
    $b = 0 ;
    if($a = 3 && $b=3){ //赋值运算符优先级最低 $a  =3 && $b=3 ; $a 被赋值的是布尔值true,++不起作用;
        $a++;
        $b++;
    }
    echo $a.','.$b.'<br/>';//1,4

    $a = 0 ; 
    $b = 0 ;
    if($a = 3 || $b=3){ // 或短路后 $b = 3根本没执行;
        $a++;
        $b++;
    }
    echo $a.','.$b.'<br/>';//1,1

/**位运算符: 
    &  按位 与
    |  按位 或
    ^  按位 异或
    ~  按位 非
    >> 按位 右移 等同 /2; 补0
    << 按位 左移 等同 *2; 补0
    其他语言 >>> 为无符号右移;

*/
    'A' = 65 = 64 + 1 =       0 000000 0000000 0000000 0100001
    'a' = 97 = 64 + 32 + 1 =  0 000000 0000000 0000000 1100001
---------------------------------------------------------------
转为逻辑型,因为php中比较运算符返回的是布尔值,所以位运算可以当作逻辑运算使用:
    var_dump ( $a>5 & $a<10 );


 其它运算符: ?: $a < $b ? $c=1 : $c=0;
            `` 反引号运算符: 执行运算符,PHP尝试将其内容作外壳命令来执行,并将其输入信息返回; $a = `ipconfig` ;
            @  错误控制运算符, 忽略其后表达式的错误信息; @表达式
            => 数组下标指定符;  $arr = array('数组键名' => '键值','数组键名2' => '键值2',);
            -> 对象成员访问符;  $a = 对象->'成员' ;
            instanceof 类型运算法 测定给定对象是否来自指定的类; 对象 instanceof 类名